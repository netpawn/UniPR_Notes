

Prova in itinere A 2018-2019
 
ESERCIZI:
Un database per cinefili è caratterizzato dal seguente schema logico relazionale.
PERSONE(codiceK, nome, anno_nascita, anno_morte*)
FILM(codiceK, titolo, anno, durata, remake_di*)
INTERPRETAZIONI(film fk, personaggioK, tipologia, attore fk, persona)
RUOLI(ruoloK)
TROUPE(filmK fk, personaK fk, ruoloK fk)
 
Si noti che fissato un film, un attore può intepretare più personaggi e una persona può
ricoprire più ruoli tecnico-artistici (regista, sceneggiatore...) all'interno della troupe.
Con riferimento allo schema suddetto esprimere le seguenti interrogazioni in linguaggio SQL
ove non altrimenti specificato.
 
1. Scrivere l'istruzione DDL per la definizione della relazione INTERPRETAZIONI
 
2. Aggiungere alla tabella INTERPRETAZIONI il vincolo che impone che nell'attributo
'tipologia' sia memorizzato uno dei valori "attore", "protagonista", "coprotagonista", "cameo".
 
3. Definire la vista relazionale FILMOGRAFIA_ATTORE che elenca per ogni persona il titolo e l'anno
del film nei quali la persona ha prestato la propria opera come attore protagonista, coprotagonista.
Oltre al codice della persona indicare anche l'anno di nascita e nome.
 
4. Per ognuno dei film diretti come regista da "Sergio Leone" e prodotti dopo il 1963, inserire nella troupe
la partecipazione di "Ennio Morricone", con ruolo "colonna sonora". Nota: si assuma che Ennio sia già presente
nella tabella PERSONE 

5. Elencare codice, titolo e anno dei film intepretati da "Robert De Niro" e "Al Pacino"
Nota: si intendono i film dove i due hanno recitato insieme come "protagonista" o "coprotagonista", escludendo 
i film antecedenti all'anno 1990 

6. Per ogni film calcolare la numerosità dell'insieme delle persone che hanno fatto parte della corrispondente troupe 
cinematografica. Ordinare il risultato in base all'anno di produzione del film. A parità di questo in base alla 
numerosità dell'insieme. 

7. Usano l'algebra relazionale esprimere il vincolo che impedisce ad un film remake di essere realizzato in un 
anno minore o uguale del film originale. 

* attributo annullabile         fk sono i vincoli di chiave esterna             K è chiave primaria 
 
-------------------------------------------------------------------------------------------------------------------
2 tabelle, una con delle persone e una con dei film. 
Tabella persona (nome, cognome, età, ...)
Tabella film (nome, genere, interpretazione, ...)

creare utente, non superuser  -> log user, dare psw ad user -> create i due database posseduti dall'user 
\drop table per eliminare 
\h alter table -> alter table interpretazione / add constraint tipologia_valida / check ( tipologia = 'cameo' ); 
* aggiungere i vincoli, deve essere tipologia valida 

constaint come si deve:
check (tipologia = 'attore' or tipologia = 'cameo' or tipologia = 'protagonista' or tipologia = 'coprotagonista'); 

altrimenti si può usare: 
check (tipologia in ( 'attore', 'protagonista', 'coprotagonista', 'cameo'));  


--------------------------------Svolgimento------------------------------------------------------------------------

1. CREATE TABLE INTERPRETAZIONI (
    film fk                         TEXT,
    personaggio     PRIMARY KEY     TEXT,
    tipologia                       TEXT,
    attore fk                       TEXT,
    persona                         TEXT,
)



-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
Se creo uno schema devo fare set search path = 'mio schema'; di modo da essere sempre lì
-------------------------------------------------------------------------------------------------------------------


create table docenti ( 
        codice integer not null primary key,
        cognome varchar(50) not null,
        nome varchar(50) not null, 
        tel varchar(20) not null, 
        email varchar(50) not null
); 

create table offerta (  
        docente integer not null references docenti(codice),
        materia varchar(50) not null,
        compenso_orario numeric(4,2),
        primary key (docente, materia)
);

create table allievi ( 
        codice integer not null primary key, 
        cognome varchar(50) not null, 
        nome varchar(50) not null, 
        tel varchar(20) not null,
        email varchar(50) 
);

create table disp_aule (
        aula varchar(20) not null,
        giorno_sett varchar(3) not null,
        ora integer not null,
        primary key (aula, giorno_sett), ora)
);

alter table disp_aule
        add constraint niente_musica_la_domenica
        check ( giorno_sett in ('lun', 'mar', 'mer', 'gio', 'ven', 'sab ) ) ;



add constraint lezioni_poeridiane
check (ora between 14 and 19 or ora in (21, 22) );

create table orario ( 
        aula varchar(20) not null,
        giorno_sett varchar(3) not null,
        ora integer not null, 
        docente integer not null,
        materia varchar(50) not null, 
        allievo integer not null, 
        primary key (aula, giorno_sett, ora), 
        foreign key (aula, giorno_sett, ora)
        references disp_aule(aula, giorno_sett, ora), 
        foreign key (docente, materia) references offerta(docente, materia), 
        foreign key (allievo) references allievi(codice),
	
	unique (docente, giorno_sett, ora)
); 





-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
 
 
 
 
ALGEBRA RELAZIONALE + SQL ESERCIZI
 
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
11) trovare i costruttori che vendono esattamente 3 modelli di pc
 
-------------------------------------------------------------------------------------------------------------------
12) esprimere i vincoli di chiave primaria usando l'algebra relazionale
 
product (maker, _model_, type)
 
 
product1 := product
    product
        JOIN_{product.model = product1.model
            and (
                product.maker != product1.maker
                    or
                product.type != product1.type
                )
        }
    product1 = { }
   
       
 
cerca la chiave di violazione primaria = { }
 
-------------------------------------------------------------------------------------------------------------------
anagrafe(_codice_, nome, cognome, sesso)
check(sesso is not null and (sesso = 'F' or sesso = 'M'))
 
vincolo in alg rel:
    sel_{sesso is null or (sesso != 'F' and sesso != 'M'))}(anagrafe) = { }  alg demorgan - or + not